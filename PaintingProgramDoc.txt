//In this document I have collected all java files needed for the execution of this program, Painting Program.
//In an attempt to showcase it onto my portfolio.

import java.io.File;
import java.util.Scanner;
import java.io.FileNotFoundException;

public class Main {
    public static void main(String[] args) throws FileNotFoundException {
        Painting painting = null;
        Scanner scanner = new Scanner(System.in);

        /*  * As long as the user has not provided a valid path to a painting:
       * Main will ask the user for the path to a painting file.
       * It will then use PaintingLoader's ability to generate a painting from that file, and store the resulting painting (or null if the path was invalid).
   * Once a valid painting has been loaded, main will convert that painting to a string and print it out.*/

        while (painting == null) {
            System.out.print("Please, enter the path to a painting file (.pnt): ");
            String filepath = scanner.nextLine();
            painting = PaintingLoader.generatePainting(filepath);
            if (painting == null) {
                System.out.println("This file path in invalid. Please, try again.");
            }
        }

        System.out.println(painting.toString());
    }
}

class Painting {
    /*A painting tracks the following data:
     * a height
     * a width
     * a 'grid' of PaintingCells (a 'grid' is a 2D array -- an array where the type of variable in each 'slot' of the array is a sub-array.)*/

    private int height;
    private int width;
    private PaintingCell[][] grid;

    /*When a painting is constructed...
     * The painting is given its height and width as integers.
     * These integers are stored on attributes, then used to construct a grid that can hold [height] x [width] painting cells.
     * For each row number in this constructed grid:
             * For each column in that row:
                   - Save a newly created painting cell into that row and column of your grid.*/

    public Painting(int height, int width) {
        this.height = height;
        this.width = width;
        this.grid = new PaintingCell[height][width];

        for (int row = 0; row < height; row = row+1) {
            for (int column = 0; column < width; column = column +1) {
                grid[row][column] = new PaintingCell();
            }
        }
    }

    /*When a painting wants to check boundaries of a given row and column...
     * The painting receives the row and column the user wants to check.
     * If the row is between 0 and the painting's height and the column is between 0 and the painting's width, then the result of the check is true.
     * In any other case, the result of the check is false.*/

    public boolean checkBoundaries(int row, int column) {
        boolean rowBoundaries =(row >= 0) && (row < height);
        boolean columnBoundaries =(column >= 0) && (column < width);
        return rowBoundaries && columnBoundaries;
    }

    /*When a painting wants to paint a cell...
    * The painting receives the row, the column, and the color of the target cell.
    * If the row and column provided are inside the checked boundaries, then:
          - The painting retrieves the cell at that row and column from its grid, and changes the color of that cell appropriately, and then sets its visibility to true.
    * When the cell is successfully edited, painting a cell returns 'true'. Otherwise, it returns false.*/

    public boolean paintCell(int row, int column, String color) {
        if (checkBoundaries(row, column)) {
            if (grid[row][column].changeColor(color)) {
                grid[row][column].setVisibility(true); //this piece of code is what fixed it, thank you professor!
                return true;
            }
        }
        return false;
    }

    /*When a painting wants to erase a cell...
    * The painting receives the row, the column, and the color of the target cell.
    * If the row and column provided are inside the checked boundaries, then:
          - The painting retrieves the cell at that row and column from its grid, and sets the visibility of that cell appropriately.
    * When the cell is successfully edited, painting a cell returns 'true'. Otherwise, it returns false.*/    

    public boolean eraseCell(int row, int column) {
        if (checkBoundaries(row, column)) {
            grid[row][column].setVisibility(false); //this set visibility from paintingCell
            return true;
        }
        return false;
    }

    /*When a painting wants to convert itself to a String...
    * The painting creates a space to hold a string representation.
    * For each row of its grid:
          * For each column in that row:
                 - The painting converts the cell in that column and row of the grid into a string, and appends that to the representation.
          * NOTE: at the end of each row, you must append a newline character to the representation!
    * Once all rows and columns have been processed, the final painting is returned.*/

    @Override
    public String toString() {
        String representation = "";
        for (int row = 0; row < height; row = row+1) {
            for (int column = 0; column < width; column= column + 1) {
                representation = representation + grid[row][column].toString();
            }
            representation= representation + "\n";
        }
        return representation;
    }
}

import java.util.*;

import static java.util.Map.entry;

/**
 *  A painting cell holds data about one individual "pixel" of an ASCII image. A painting cell has two values:
 *  a color code as a string, and a boolean that represents whether or not the cell should be filled in.
 *
 * @author Prof. Matthew Obetz
 * @version 1.0
 */
public class PaintingCell {

    /**
     * Convenience map of ASCII color codes. This is used to look up the terminal code for a color given its name.
     */
    private static final Map<String, String> colors = Map.ofEntries(
            entry("red", "\u001B[31m"),
            entry("yellow", "\u001B[33m"),
            entry("green", "\u001B[32m"),
            entry("cyan", "\u001B[36m"),
            entry("blue", "\u001B[34m"),
            entry("purple", "\u001B[35m"),
            entry("black","\u001B[30m"),
            entry("white", "\u001B[37m")
            );

    /**
     * The reset color code. This special code reverts the cursor back to the default color.
     */
    private static final String RESET = "\u001B[0m";


    /**
     * This variable stores the color for the pixel. Set only by the constructor and the pixel.changeColor() method.
     */
    private String color_code;

    /**
     * This variable stores whether a pixel should be displayed or not when a cell is printed. True = will be dispalyed.
     */
    private boolean visibility;

    /**
     *  Constructor to create new PaintingCell.
     *
     *  Example Usage:
     *  <pre>
     *      PaintingCell new_cell = new PaintingCell();
     *  </pre>
     *
     *  This snippet will create a new empty cell.
     *
     */
    public PaintingCell() {
        this.visibility = false;
        this.changeColor("black");
    }

    /**
     * This method can be used to change the color of an already existing cell.
     * Note: if the user provides an invalid color, the cell will be defaulted to invisible.
     *
     * Example Usage:
     * <pre>
     *      PaintingCell new_cell = new PaintingCell();
     *      new_cell.changeColor("red");
     * </pre>
     *
     * This code snippet takes a cell that was previously blue, and changes the color of that cell to red.
     *
     * @param new_color the name of the new color that should be used for a cell.
     * @return true if the color was successfully set. False if the user provided an invalid color.
     */
    public boolean changeColor(String new_color) {
        new_color = new_color.toLowerCase();
        boolean valid_choice = colorExists(new_color);
        this.color_code = colors.getOrDefault(new_color, "");

        // the cell should be visible only if it was previously set to visible AND if it has a valid color.
        this.visibility = this.visibility && valid_choice;

        return valid_choice;
    }


    /**
     * Change the visibility of this cell when it is printed.
     *
     * Example Usage:
     * <pre>
     *      PaintingCell new_cell = new PaintingCell();
     *      new_cell.setVisibility(false);
     * </pre>
     *
     * This code snippet takes a cell that could previously be seen, and 'erases' that cell from the image.
     *
     * @param is_visible if true, cell will display a colored *. If false, only blank space will be displayed.
     */
    public void setVisibility(boolean is_visible) {
        this.visibility = is_visible;
    }


    /**
     * Utility function to check whether a color_name exists. Can be used to validate user input before calling
     * pixel.changeColor().
     *
     * Example Usage:
     * <pre>
     *     String color_name = "asdfasdfasdf";
     *      if ( !PaintingCell.colorExists(color_name) ) {
     *          System.out.println("That's not a valid color!");
     *      }
     * </pre>
     *
     * This code snippet checks whether the color name stored in color_name is valid, and prints a warning message if
     * it is not.
     *
     * @param color_name the name of the color to check for.
     * @return true if color does exist, otherwise false.
     */
    public static boolean colorExists(String color_name) {
        return colors.containsKey(color_name.toLowerCase());
    }

    /**
     * Returns a valid random color from the list of colors.
     *
     * Example Usage:
     * <pre>
     *     String color_name = PaintingCell.getRandomColor();
     *     PaintingCell new_cell = new PaintingCell();
     *     new_cell.changeColor(color_name);
     * </pre>
     *
     * This code snippet creates a newly visible cell of a random color.
     *
     * @return String representing the color name
     */
    public static String getRandomColor() {
        List<String> color_list = new ArrayList<String>(colors.keySet());
        Collections.shuffle(color_list);
        return color_list.get(0);
    }

    @Override
    /**
     * Overrides the default behavior when this cell is coerced into a string.
     *
     * Example Usage:
     * <pre>
     *     PaintingCell new_cell = new PaintingCell();
     *     new_cell.changeColor("blue");
     *     System.out.print(new_cell);
     * </pre>
     *
     * This will cause a blue * to be printed to the console.
     */
    public String toString() {
        return ( this.visibility ) ? this.color_code + "* " + RESET : "  ";
    }


}

import java.io.File;
import java.util.Scanner;
import java.io.FileNotFoundException;

class PaintingLoader {
    private PaintingLoader(/*zero argument parameter*/) {
    }

    /* PaintingLoader will have one private static helper function: the ability to convert a letter to color:
       * Converting a letter to a color starts with a given letter.
       * The colors available to a painting are red - "R", yellow - "Y", green -"G" , cyan - "C", blue - "B", purple - "P", black - "X", and white - "O". 
       * If the painting method receives one of these letters, then it returns the corresponding color.*/

    private static String convertLetterToColor(String letter) {
        if ("R".equals(letter)) {
            return "red";
        } else if ("Y".equals(letter)) {
            return "yellow";
        } else if ("G".equals(letter)) {
            return "green";
        } else if ("C".equals(letter)) {
            return "cyan";
        } else if ("B".equals(letter)) {
            return "blue";
        } else if ("P".equals(letter)) {
            return "purple";
        } else if ("X".equals(letter)) {
            return "black";
        } else if ("O".equals(letter)) {
            return "white";
        } else {
            return "black";
        }
    }

    /*PaintingLoader will have a public static method: the ability to generate a painting from a File...
         * When this method is called, it will be provided with one parameter: a string filepath.*/

    public static Painting generatePainting(String filepath) throws FileNotFoundException {

    /* * This filepath will be used to construct and store a File object representing the file holding that information.*/
        File file = new File(filepath);

        /* * If the File created exists and its path ends with ".pnt":
            * PaintingLoader will create a space to track a number of rows, a number of columns, and a group of Strings representing each row of the painting.
                 - NOTE: you can assume a painting will never have more than 25 rows, and that every column has the same number of symbols.*/
        if (!file.exists() || !filepath.endsWith(".pnt")) {
            return null;
        }

        int height = 0;
        int width = 0;
        String[] rows = new String[25];

            /** PaintingLoader will then make a Scanner that can read the file.*/
        Scanner scan = new Scanner(file);

            /** As long as the scanner still has a next line:
               * That next line will be appended to the group of painting rows.
               * The number of columns will be set to the length of that line.
               * The number of rows will be incremented by one.*/

        while (scan.hasNextLine()) {
            String line = scan.nextLine();
            rows[height] = line;
            width = line.length();
            height = height+1;
        }

        /* * Once the file has finished being read, the loader will construct a new painting object with the appropriate height and width.
           * Afterward, for each row number in the painting:
                  * The loader will retrieve the string representing that row of the painting, and split that row into a group of letters (using .split("") with an empty string splits on every letter.)
                  * For each column in that group of letters:
                         * The loader will convert the letter in that cell into a color.
                         * Afterward, the loader will tell its painting to paint the cell in that row and column the appropriate color.
          * Once the entire painting has been painting, the loader will return the finished painting.
        * If an invalid path was provided, the method will return null.*/

        Painting painting = new Painting(height, width);
        for (int row = 0; row < height; row = row+1) {
            String[] symbols = rows[row].split("");
            for (int column = 0; column < width; column = column+1) {
                String color = convertLetterToColor(symbols[column]);
                painting.paintCell(row, column, color);
            }
        }

        return painting;
    }

}


smile.pnt = 

YYYYYYYYYY
YYYBYYBYYY
YBYYYYYYBY
YYBBBBBBYY
YYYYYYYYYY


tree.pnt=
BBBBBBBBBBBBBBBBBBB
BBBBBBBBGGBBBBBBBBB
BBBBBBBGGGGBBBBBBBB
BBBBBBGGGGGGBBBBBBB
BBBBBGGGGGGGGBBBBBB
BBBBBBGGGGGGBBBBBBB
BBBBBGGGGGGGGBBBBBB
BBBBGGGGGGGGGGBBBBB
BBBGGGGGGGGGGGGBBBB
BBGGGGGGGGGGGGGGBBB
BBBBBBBBYYBBBBBBBBB
BBBBBBBBYYBBBBBBBBB


house.pnt=
BBBBBBBBBBBBBBBBBBBBBBBBB
BBBBBBBBOOOOOOOOOBBBBBBBB
BBBBBBOOOOOOOOOOOOBBBBBBB
BBBBBOOOOOOOOOOOOOOBBBBBB
BBBBBBPPPPPPPPPPPPBBBBBBB
BBBBBBPPPBPPPPBPPPBBBBBBB
BBBBBBPPPPPRRPPPPPBBBBBBB
BBBBBBPPPPPRRPPPPPBBBBBBB
